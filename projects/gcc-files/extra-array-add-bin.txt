diff --git a/bfd/bfd-in2.h b/bfd/bfd-in2.h
index c64eee1..273f5b3 100644
--- a/bfd/bfd-in2.h
+++ b/bfd/bfd-in2.h
@@ -4779,6 +4779,7 @@ number for the SBIC, SBIS, SBI and CBI instructions  */
   BFD_RELOC_RISCV_SET16,
   BFD_RELOC_RISCV_SET32,
   BFD_RELOC_RISCV_32_PCREL,
+  BFD_RELOC_RISCV_GPREL_ADD,
 
 /* Renesas RL78 Relocations.  */
   BFD_RELOC_RL78_NEG8,
diff --git a/bfd/elfnn-riscv.c b/bfd/elfnn-riscv.c
index b82e655..7b1acf1 100644
--- a/bfd/elfnn-riscv.c
+++ b/bfd/elfnn-riscv.c
@@ -1799,6 +1799,7 @@ riscv_elf_relocate_section (bfd *output_bfd,
 	case R_RISCV_COPY:
 	case R_RISCV_JUMP_SLOT:
 	case R_RISCV_RELATIVE:
+	case R_RISCV_GPREL_ADD:
 	  /* These require nothing of us at all.  */
 	  continue;
 
@@ -3035,6 +3036,20 @@ _bfd_riscv_relax_lui (bfd *abfd,
 	  rel->r_info = ELFNN_R_INFO (sym, R_RISCV_GPREL_S);
 	  return TRUE;
 
+	case R_RISCV_GPREL_ADD:
+	  {
+	    bfd_vma add_insn = bfd_get_32 (abfd, contents + rel->r_offset);
+	    /* ??? Verify that this is a 32-bit instruction.  */
+	    if ((add_insn & 0x3) != 0x3)
+	      abort ();
+	    /* The HI20 part is always in RS2.  */
+	    add_insn &= ~(OP_MASK_RS2 << OP_SH_RS2);
+	    add_insn |= 0x3 << OP_SH_RS2;
+	    bfd_put_32 (abfd, add_insn, contents + rel->r_offset);
+	    rel->r_info = ELFNN_R_INFO (0, R_RISCV_NONE);
+	  }
+	  break;
+
 	case R_RISCV_HI20:
 	  /* We can delete the unnecessary LUI and reloc.  */
 	  rel->r_info = ELFNN_R_INFO (0, R_RISCV_NONE);
@@ -3370,6 +3385,7 @@ _bfd_riscv_relax_section (bfd *abfd, asection *sec,
 	  if (type == R_RISCV_CALL || type == R_RISCV_CALL_PLT)
 	    relax_func = _bfd_riscv_relax_call;
 	  else if (type == R_RISCV_HI20
+		   || type == R_RISCV_GPREL_ADD
 		   || type == R_RISCV_LO12_I
 		   || type == R_RISCV_LO12_S)
 	    relax_func = _bfd_riscv_relax_lui;
diff --git a/bfd/elfxx-riscv.c b/bfd/elfxx-riscv.c
index 7d4f59f..043cfa3 100644
--- a/bfd/elfxx-riscv.c
+++ b/bfd/elfxx-riscv.c
@@ -855,6 +855,21 @@ static reloc_howto_type howto_table[] =
 	 0,				/* src_mask */
 	 MINUS_ONE,			/* dst_mask */
 	 FALSE),			/* pcrel_offset */
+
+  /* For relaxing absolute addressing to gprel.  */
+  HOWTO (R_RISCV_GPREL_ADD,		/* type */
+	 0,				/* rightshift */
+	 2,				/* size */
+	 32,				/* bitsize */
+	 FALSE,				/* pc_relative */
+	 0,				/* bitpos */
+	 complain_overflow_dont,	/* complain_on_overflow */
+	 bfd_elf_generic_reloc,		/* special_function */
+	 "R_RISCV_GPREL_ADD",		/* name */
+	 TRUE,				/* partial_inplace */
+	 0,				/* src_mask */
+	 0,				/* dst_mask */
+	 FALSE),			/* pcrel_offset */
 };
 
 /* A mapping from BFD reloc types to RISC-V ELF reloc types.  */
@@ -917,6 +932,7 @@ static const struct elf_reloc_map riscv_reloc_map[] =
   { BFD_RELOC_RISCV_SET16, R_RISCV_SET16 },
   { BFD_RELOC_RISCV_SET32, R_RISCV_SET32 },
   { BFD_RELOC_RISCV_32_PCREL, R_RISCV_32_PCREL },
+  { BFD_RELOC_RISCV_GPREL_ADD, R_RISCV_GPREL_ADD },
 };
 
 /* Given a BFD reloc type, return a howto structure.  */
diff --git a/bfd/libbfd.h b/bfd/libbfd.h
index b810c40..34ba040 100644
--- a/bfd/libbfd.h
+++ b/bfd/libbfd.h
@@ -2262,6 +2262,7 @@ static const char *const bfd_reloc_code_real_names[] = { "@@uninitialized@@",
   "BFD_RELOC_RISCV_SET16",
   "BFD_RELOC_RISCV_SET32",
   "BFD_RELOC_RISCV_32_PCREL",
+  "BFD_RELOC_RISCV_GPREL_ADD",
   "BFD_RELOC_RL78_NEG8",
   "BFD_RELOC_RL78_NEG16",
   "BFD_RELOC_RL78_NEG24",
diff --git a/bfd/reloc.c b/bfd/reloc.c
index 411f998..6459789 100644
--- a/bfd/reloc.c
+++ b/bfd/reloc.c
@@ -5218,6 +5218,8 @@ ENUMX
   BFD_RELOC_RISCV_SET32
 ENUMX
   BFD_RELOC_RISCV_32_PCREL
+ENUMX
+  BFD_RELOC_RISCV_GPREL_ADD
 ENUMDOC
   RISC-V relocations.
 
diff --git a/gas/config/tc-riscv.c b/gas/config/tc-riscv.c
index 43ae21f..d54d831 100644
--- a/gas/config/tc-riscv.c
+++ b/gas/config/tc-riscv.c
@@ -1296,6 +1296,7 @@ static const struct percent_op_match percent_op_stype[] =
 static const struct percent_op_match percent_op_rtype[] =
 {
   {"%tprel_add", BFD_RELOC_RISCV_TPREL_ADD},
+  {"%gprel_add", BFD_RELOC_RISCV_GPREL_ADD},
   {0, 0}
 };
 
@@ -2543,6 +2544,7 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg ATTRIBUTE_UNUSED)
 
     case BFD_RELOC_RISCV_CALL:
     case BFD_RELOC_RISCV_CALL_PLT:
+    case BFD_RELOC_RISCV_GPREL_ADD:
       relaxable = TRUE;
       break;
 
diff --git a/include/elf/riscv.h b/include/elf/riscv.h
index d036e83..2387eaf 100644
--- a/include/elf/riscv.h
+++ b/include/elf/riscv.h
@@ -88,6 +88,7 @@ START_RELOC_NUMBERS (elf_riscv_reloc_type)
   RELOC_NUMBER (R_RISCV_SET16, 55)
   RELOC_NUMBER (R_RISCV_SET32, 56)
   RELOC_NUMBER (R_RISCV_32_PCREL, 57)
+  RELOC_NUMBER (R_RISCV_GPREL_ADD, 58)
 END_RELOC_NUMBERS (R_RISCV_max)
 
 /* Processor specific flags for the ELF header e_flags field.  */
